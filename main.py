# This script generates a report of the collaborators who were not absent in a given region.
# The data is loaded from a Report generated by GeoVictoria App file and the regions are loaded from a JSON file.

# V. 1.1: Created the method is_valid_based_on_salary to check if the collaborator's salary is greater than 2542.86. 

# Author: Pedro Potapczuk Fructuoso
# Date: 2025-01-28
# Version: 1.1

import customtkinter as ctk
import pandas as pd
import threading
import json
import sys
import os
from tkinter import filedialog, messagebox

ctk.set_appearance_mode("dark")
ctk.set_default_color_theme("blue")

class AttendanceApp(ctk.CTk):
    def __init__(self):
        super().__init__()
        self.title("Controle de Presenças - Inovação Serviços")
        self.geometry("350x200")
        # Loading the regions from a JSON file
        self.regions = self.load_regions_from_file("regions.json")

        self.region_options = list(self.regions.keys())

        self.region_label = ctk.CTkLabel(self, text="Região")
        self.region_label.pack(pady=5)

        self.region_dropdown = ctk.CTkComboBox(self, values=self.region_options)
        self.region_dropdown.pack(pady=10)

        self.generate_report_button = ctk.CTkButton(self, text="Relatório Presenças", command=self.generate_report)
        self.generate_report_button.pack(pady=10)

        self.loading_label = ctk.CTkLabel(self, text="Gerando Relatório...")
        self.loading_label.pack(pady=10)
        self.loading_label.pack_forget()

        self.loading_bar = ctk.CTkProgressBar(self, width=300, mode="indeterminate")
        self.loading_bar.pack(pady=10)
        self.loading_bar.pack_forget()

    # This method loads the regions from a JSON file
    def load_regions_from_file(self, filename):
        try:
            if getattr(sys, 'frozen', False):
                filename = os.path.join(sys._MEIPASS, filename)
            with open(filename, 'r') as file:
                regions = json.load(file)
            return regions
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao carregar o arquivo de regiões: {e}")
            return {}

    # This method load the data from an Excel file
    def load_data(self, file):
        try:
            return pd.read_excel(file)
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao carregar arquivo: {e}")
            return None

    # This method checks if the collaborator is valid based on the salary UPDATED ON 2025-01-27
    def is_valid_based_on_salary(self, surname, group_data, totvs_data):
        # Getting the CPF from the group data (convert to string)
        cpf = str(group_data[group_data['Sobrenomes'] == surname]['Identificador'].iloc[0])

        # Clean the CPF from group_data (remove '.' and '-')
        cpf = cpf.replace('.', '').replace('-', '')

        # Clean the CPF in totvs_data as well (ensure it's a string)
        totvs_data['CPF'] = totvs_data['CPF'].astype(str).str.replace('.', '', regex=False).str.replace('-', '', regex=False)

        # Matching the CPF with the TOTVS data
        totvs_match = totvs_data[totvs_data['CPF'] == cpf]

        # Verifying if the salary is greater than 2542.86
        if not totvs_match.empty:
            salary = totvs_match['Salário'].iloc[0]
            if salary > 2542.86:
                return False

        return True

    # This method generates the report
    def generate_report(self):
        def report_thread():
            self.loading_label.pack()
            self.loading_bar.pack()
            self.loading_bar.start()

            selected_region = self.region_dropdown.get()

            if not selected_region:
                messagebox.showwarning("Aviso", "Selecione uma região!")
                self.loading_bar.stop()
                self.loading_label.pack_forget()
                self.loading_bar.pack_forget()
                return

            if selected_region not in self.regions:
                messagebox.showwarning("Aviso", "Região não encontrada!")
                self.loading_bar.stop()
                self.loading_label.pack_forget()
                self.loading_bar.pack_forget()
                return

            group_names = self.regions[selected_region]
            
            file = filedialog.askopenfilename(filetypes=[("Excel", "*.xlsx")])
            if not file:
                self.loading_bar.stop()
                self.loading_label.pack_forget()
                self.loading_bar.pack_forget()
                return

            data = self.load_data(file)
            if data is None or data.empty:
                self.loading_bar.stop()
                self.loading_label.pack_forget()
                self.loading_bar.pack_forget()
                return

            # Asking the user for the TOTVS file with the wages
            totvs_file = filedialog.askopenfilename(filetypes=[("Excel", "*.xlsx")])
            if not totvs_file:
                self.loading_bar.stop()
                self.loading_label.pack_forget()
                self.loading_bar.pack_forget()
                return
            
            totvs_data = self.load_data(totvs_file)
            if totvs_data is None or totvs_data.empty:
                self.loading_bar.stop()
                self.loading_label.pack_forget()
                self.loading_bar.pack_forget()
                return
            
            totvs_data = pd.read_excel(totvs_file, skiprows=2)
            totvs_data.columns = totvs_data.columns.str.strip()
            totvs_data = totvs_data[['Filial', 'Matricula', 'Nome complet', 'CPF', 'Salário']]

            # Filtering the data based on the selected region's groups
            filtered_data = data[data['Grupo'].isin(group_names)]
            if filtered_data.empty:
                messagebox.showinfo("Sem Dados", f"Nenhuma presença encontrada para os grupos {', '.join(group_names)}.")
                self.loading_bar.stop()
                self.loading_label.pack_forget()
                self.loading_bar.pack_forget()
                return

            # Invalid permissions to count as an attendance
            invalid_permissions = [
                "Aqui você pode colocar as permissões na qual você considera que o colaborador não está presente como 'Falta', 'Férias' etc... "
            ]

            group_counts = []
            all_collaborators = []

            # The logic to count the collaborators who were not absent
            for group in group_names:
                group_data = filtered_data[filtered_data['Grupo'] == group]
                unique_surnames = group_data['Sobrenomes'].unique()

                valid_collaborators = 0
                for surname in unique_surnames:
                    collaborator_data = group_data[group_data['Sobrenomes'] == surname]

                    # Check if the collaborator is valid based on permission and salary
                    if not collaborator_data['Permissão'].isin(invalid_permissions).any() and not (
                        (collaborator_data['Turno'] == "Não planejado")
                        & (collaborator_data['Entrou'].isna() | (collaborator_data['Entrou'] == ""))
                    ).any() and self.is_valid_based_on_salary(surname, group_data, totvs_data):
                        valid_collaborators += 1
                        # Adding collaborator name and group to all_collaborators
                        first_name = collaborator_data['Nome'].iloc[0]
                        last_name = collaborator_data['Sobrenomes'].iloc[0]
                        all_collaborators.append([group, first_name, last_name])

                group_counts.append([group, valid_collaborators])

            # Creating a DataFrame for collaborators
            collaborators_df = pd.DataFrame(all_collaborators, columns=["LOJA", "NOME", "MATRICULA"])

            # Creating a DataFrame for group counts
            report_data = pd.DataFrame(group_counts, columns=["LOJA", "QUANTIDADE DE COLABORADORES SEM FALTAS"])
            total_collaborators = report_data["QUANTIDADE DE COLABORADORES SEM FALTAS"].sum()

            total_row = pd.DataFrame([["Total", total_collaborators]], columns=["LOJA", "QUANTIDADE DE COLABORADORES SEM FALTAS"])
            report_data = pd.concat([report_data, total_row], ignore_index=True)

            # Saving the report to an Excel file
            filename = f"relatorioColaboradoresSemFalta_{selected_region}.xlsx"
            save_path = filedialog.asksaveasfilename(defaultextension=".xlsx", filetypes=[("Excel Files", "*.xlsx")], initialfile=filename)
            if save_path:
                try:
                    with pd.ExcelWriter(save_path) as writer:
                        report_data.to_excel(writer, index=False, sheet_name='Resumo')
                        collaborators_df.to_excel(writer, index=False, sheet_name='Colaboradores')

                    messagebox.showinfo("Sucesso", f"Relatório salvo em {save_path}")
                except Exception as e:
                    messagebox.showerror("Erro", f"Erro ao salvar o arquivo: {e}")
            else:
                messagebox.showwarning("Aviso", "O Relatório não foi salvo.")

            self.loading_bar.stop()
            self.loading_label.pack_forget()
            self.loading_bar.pack_forget()

        thread = threading.Thread(target=report_thread)
        thread.start()

if __name__ == "__main__":
    app = AttendanceApp()
    app.mainloop()